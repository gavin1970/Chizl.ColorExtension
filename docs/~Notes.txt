===================================================================
REVIEW NOTES:
===================================================================
private static (double Max, double Min, double Delta) Range(double a, double b, double c) => 
    (Math.Max(a, Math.Max(b, c)), Math.Min(a, Math.Min(b, c)), Math.Abs(a - b) + Math.Abs(b - c));


===================================================================
HUE NOTES:
===================================================================
357: Burnt Chili, Smoky Chili, Spiced Chili
324: Terracotta Brick, Rust Brick, Sienna Brick
246: Imperial Blue, Regal Blue, Majestic Blue	
245: Deep Sapphire, Ocean Sapphire, Midnight Sapphire	
140: Seafoam Green (a bit lighter and bluer), Marine Green, Aqua Green (if you want a bluer touch), Coastal Green
247: rename to "Rich Cobalt" or "Deep Cobalt" or "Regal Cobalt" (you already have "Regal Blue" at 246, so "Rich Cobalt" or "Deep Cobalt" might work better)
Use evocative modifiers (like Burnt, Smoky, Deep, Velvet, Molten) to suggest nuance beyond just hue degree.

-----------------
Red (0-~15, ~345-360)           -- 0 degrees: Red
Orange (~15-~45)                -- Between 0 (Red) and 60 (Yellow) is Orange.
Yellow (~45-~75)                -- 60 degrees: Yellow
Yellow-Green (~75-~105)         -- Between 60 (Yellow) and 120 (Green) is Chartreuse or Yellow-Green.
Green (~105-~165)               -- 120 degrees: Green
                                -- Between 120 (Green) and 180 (Cyan) is Spring Green or Green-Cyan.
Blue-Green/Cyan (~165-~195)     -- 180 degrees: Cyan (or Aqua)
                                -- Between 180 (Cyan) and 240 (Blue) is Azure or Cyan-Blue.
Blue (~195-~255)                -- 240 degrees: Blue
Blue-Violet/Indigo (~255-~285)  -- Between 240 (Blue) and 300 (Magenta) is Violet or Blue-Magenta.
Violet/Purple (~285-~315)       -- 300 degrees: Magenta (or Fuchsia)
                                -- Between 300 (Magenta) and 360/0 (Red) is Rose or Red-Magenta.     
Magenta/Red-Violet (~315-~345)  -- 360 degrees (or 0 degrees): Red (it wraps around)
-----------------
Red: 0° or 360°
Orange: 30°
Yellow: 60°
Chartreuse Green: 90°
Green: 120°
Spring Green: 150°
Cyan: 180°
Azure: 210°
Blue: 240°
Violet: 270°
Magenta: 300°
Rose: 330° 
-----------------
Hue Representation: In a standard HSL (Hue, Saturation, Lightness) or HSV (Hue, Saturation, Value) color model, hue is represented as an angle from 0 to 360 degrees.
Primary and Secondary Colors:
    0 degrees: Red
    60 degrees: Yellow
    120 degrees: Green
    180 degrees: Cyan (or Aqua)
    240 degrees: Blue
    300 degrees: Magenta (or Fuchsia)
    360 degrees (or 0 degrees): Red (it wraps around)
Intermediate Colors: Colors in between these points are blends. For example:
    Between 0 (Red) and 60 (Yellow) is Orange.
    Between 60 (Yellow) and 120 (Green) is Chartreuse or Yellow-Green.
    Between 120 (Green) and 180 (Cyan) is Spring Green or Green-Cyan.
    Between 180 (Cyan) and 240 (Blue) is Azure or Cyan-Blue.
    Between 240 (Blue) and 300 (Magenta) is Violet or Blue-Magenta.
    Between 300 (Magenta) and 360/0 (Red) is Rose or Red-Magenta.     
-----------------

===================================================================
OLD REVIEW CODE:
===================================================================

//private static readonly List<ToneRule> _toneRules = new List<ToneRule>()
//{
//    // --- NEUTRALS (Lowest Saturation: s < 20%) ---
//    // These should always be checked first as they define the 'neutral' gray scale.
//    new ToneRule(1, (s, v) => s < 20.0 && v > 85.0, "Light Neutral", "Saturation < 20.0, Value > 85.0"),
//    new ToneRule(2, (s, v) => s < 20.0 && v > 55.0, "Mid Neutral", "Saturation < 20.0, Value > 55.0"),
//    new ToneRule(3, (s, v) => s < 20.0 && v > 20.0, "Dark Neutral", "Saturation < 20.0, Value > 20.0"),
//    new ToneRule(4, (s, v) => s < 20.0 && v <= 20.0, "Near Black", "Saturation < 20.0, Value <= 20.0"),
//    
//    // --- HIGH BRIGHTNESS (Value > 85%) ---
//    // These are the brightest colors, prioritized by saturation.
//    new ToneRule(5, (s, v) => v > 85.0 && s > 75.0, "Vivid", "Value > 85.0, Saturation > 75.0"),
//    new ToneRule(6, (s, v) => v > 85.0 && s > 40.0, "Bright", "Value > 85.0, Saturation > 40.0"),
//    new ToneRule(7, (s, v) => v > 85.0, "Pastel", "Value > 85.0"),
//    //new ToneRule(7, (s, v) => v > 85.0 && s >= 20.0, "Pastel", ...),
//    
//    // --- MID BRIGHTNESS (Value > 55%) ---
//    // Colors that are still quite bright but not "high" brightness.
//    new ToneRule(8, (s, v) => v > 55.0 && s > 75.0, "Strong", "Value > 55.0, Saturation > 75.0"),
//    new ToneRule(9, (s, v) => v > 55.0 && s > 30.0, "Moderate", "Value > 55.0, Saturation > 30.0"),
//    new ToneRule(10, (s, v) => v > 55.0, "Muted Light", "Value > 55.0"),
//    //new ToneRule(10, (s, v) => v > 55.0 && s >= 20.0, "Muted Light", ...),
//    
//    // --- LOW BRIGHTNESS (Value > 20%) ---
//    // Colors that are somewhat dark but still have color.
//    new ToneRule(11, (s, v) => v > 20.0 && s > 60.0, "Deep", "Value > 20.0, Saturation > 60.0"),
//    new ToneRule(12, (s, v) => v > 20.0 && s > 20.0, "Dull", "Value > 20.0, Saturation > 20.0"),
//    new ToneRule(13, (s, v) => v > 20.0, "Desaturated", "Value > 20.0"),
//    
//    // --- VERY DARK (Value <= 20%) ---
//    // These are almost black, or very dark tones.
//    new ToneRule(14, (s, v) => v <= 10.0, "Black", ...),
//    new ToneRule(15, (s, v) => v > 10.0 && v <= 20.0, "Very Dark", ...),
//    //new ToneRule(16, (s, v) => v <= 20.0, "Very Dark", "Value <= 20.0"),
//};
-----------------

